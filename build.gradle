plugins {
    id "java"
    id "maven"
    id "eclipse"
    id "idea"
    id "com.github.hierynomus.license" version "0.12.1"
    id "com.github.johnrengelman.shadow" version "1.2.4"
    id "com.jfrog.artifactory" version "4.0.0"
    id "org.spongepowered.plugin" version "0.6"
    id "com.mendhak.gradlecrowdin" version "0.0.9"
}

defaultTasks 'licenseFormat', 'build'

group = 'com.sk89q.craftbook'
version = '4.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://repo.spongepowered.org/maven/" }
    maven { url "http://maven.sk89q.com/repo/" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://dl.bintray.com/me4502/maven' }
}

dependencies {
    compile 'org.spongepowered:spongeapi:5.1.0-SNAPSHOT'
    compile 'com.google.guava:guava:18.0'
    compile 'com.google.code.findbugs:jsr305:1.3.9'
    compile 'com.owlike:genson:1.3'
    compile 'com.me4502:ModularFramework:1.5'
    compile 'com.sk89q.worldedit:worldedit-sponge-mc1.10.2:6.1.4-SNAPSHOT'
    testCompile 'org.mockito:mockito-core:2.+'
    testCompile 'junit:junit:5.+'
}

configurations.all {
    resolutionStrategy {
        force 'org.spongepowered:spongeapi:5.2.0-SNAPSHOT'
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    // Java 8 turns on doclint which we fail
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

license {
    ext {
        year = Calendar.getInstance().get(Calendar.YEAR)
    }

    header = file('HEADER.txt')
    include '**/*.java'

    ignoreFailures = false
    strictCheck = true

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// The outputs

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    classifier 'original'
}

shadowJar {
    classifier ''
    dependencies {
        relocate ("com.me4502.modularframework", "com.sk89q.craftbook.util.modularframework") {
            include(dependency("com.me4502:ModularFramework"))
            exclude "com.me4502.modularframework.ModularFramework"
        }

        include(dependency("com.owlike:genson"))
    }
    exclude 'docs'
    exclude 'GradleStart**'
    exclude '.cache'
    exclude 'LICENSE*'
    exclude "com/me4502/modularframework/ModularFramework.class" //Don't copy across the file that was left out of ModularFramework.
}

task archivesZip(type:Zip) {
    from ('build/libs/')
    from ('LICENSE.txt')
    from ('README.md')
    exclude ('*.zip')

    destinationDir = file('build/libs')
}

// Extra Depends

compileJava.dependsOn(licenseFormat)
build.dependsOn(sourcesJar)
build.dependsOn(javadocJar)
build.dependsOn(archivesZip)
archivesZip.dependsOn(shadowJar)
archivesZip.dependsOn(sourcesJar)
archivesZip.dependsOn(javadocJar)
archivesZip.dependsOn(jar)

// Translations Section

if (project.hasProperty("crowdin_apikey")) {
    build.dependsOn(crowdinUpload)
    build.dependsOn(crowdinDownload)
} else {
    ext.crowdin_apikey = ""
}

crowdinDownload {
    apiKey = "${crowdin_apikey}"
    destination = "$projectDir/src/main/resources/assets/craftbook/strings"
    projectId = 'craftbook'

    //Optional
    //Android projects
    renameMapping  = [
            from:  '^(.*)/(.*)$',
            to:  /strings_\1_\2.properties/
    ]
    //Optional
    excludePattern = '**/*.txt'
}

crowdinUpload {
    apiKey = "${crowdin_apikey}"
    projectId = 'craftbook'
    sourceFiles = [
            ['strings.properties', "$projectDir/src/main/resources/assets/craftbook/strings/strings.properties"]
    ]
}

// Deployment Section

if (!project.hasProperty("artifactory_contextUrl")) ext.artifactory_contextUrl = "http://localhost"
if (!project.hasProperty("artifactory_user")) ext.artifactory_user = "guest"
if (!project.hasProperty("artifactory_password")) ext.artifactory_password = ""

if (!project.hasProperty("gitCommitHash")) {
    try {
        def repo = Grgit.open(project.file('.'))
        ext.gitCommitHash = repo.head().abbreviatedId
    } catch (Exception e) {
        ext.gitCommitHash = "no_git_id"
    }
}

ext.internalVersion = version + ";" + gitCommitHash

artifacts {
    archives shadowJar
    archives sourcesJar
    archives javadocJar
    archives archivesZip.destinationDir
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = project.version.contains("SNAPSHOT") ? 'libs-snapshot-local' : 'libs-release-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
            
        }
    }

    resolve {
        repository {
            repoKey = 'repo'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

// Help Text

println """
*******************************************
 You are building CraftBook!

 If you encounter trouble:
 1) Read COMPILING.md if you haven't yet
 2) Use gradlew and not gradle
 3) If you still need help, ask on IRC! irc.esper.net #sk89q

 Output files will be in build/libs
*******************************************
"""
